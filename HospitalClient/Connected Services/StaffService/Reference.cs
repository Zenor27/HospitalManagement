//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StaffService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StaffService.IStaffService")]
    public interface IStaffService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaffService/GetStaffs", ReplyAction="http://tempuri.org/IStaffService/GetStaffsResponse")]
        HospitalEntities.Models.Staff[] GetStaffs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaffService/GetStaffs", ReplyAction="http://tempuri.org/IStaffService/GetStaffsResponse")]
        System.Threading.Tasks.Task<HospitalEntities.Models.Staff[]> GetStaffsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaffService/GetStaffById", ReplyAction="http://tempuri.org/IStaffService/GetStaffByIdResponse")]
        HospitalEntities.Models.Staff GetStaffById(int staffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaffService/GetStaffById", ReplyAction="http://tempuri.org/IStaffService/GetStaffByIdResponse")]
        System.Threading.Tasks.Task<HospitalEntities.Models.Staff> GetStaffByIdAsync(int staffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaffService/AddStaff", ReplyAction="http://tempuri.org/IStaffService/AddStaffResponse")]
        System.Nullable<HospitalServer.Dto.ResponseErrorEnum> AddStaff(HospitalServer.Requests.AddStaffRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaffService/AddStaff", ReplyAction="http://tempuri.org/IStaffService/AddStaffResponse")]
        System.Threading.Tasks.Task<System.Nullable<HospitalServer.Dto.ResponseErrorEnum>> AddStaffAsync(HospitalServer.Requests.AddStaffRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IStaffServiceChannel : StaffService.IStaffService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class StaffServiceClient : System.ServiceModel.ClientBase<StaffService.IStaffService>, StaffService.IStaffService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public StaffServiceClient() : 
                base(StaffServiceClient.GetDefaultBinding(), StaffServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IStaffService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StaffServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(StaffServiceClient.GetBindingForEndpoint(endpointConfiguration), StaffServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StaffServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(StaffServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StaffServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(StaffServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StaffServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public HospitalEntities.Models.Staff[] GetStaffs()
        {
            return base.Channel.GetStaffs();
        }
        
        public System.Threading.Tasks.Task<HospitalEntities.Models.Staff[]> GetStaffsAsync()
        {
            return base.Channel.GetStaffsAsync();
        }
        
        public HospitalEntities.Models.Staff GetStaffById(int staffId)
        {
            return base.Channel.GetStaffById(staffId);
        }
        
        public System.Threading.Tasks.Task<HospitalEntities.Models.Staff> GetStaffByIdAsync(int staffId)
        {
            return base.Channel.GetStaffByIdAsync(staffId);
        }
        
        public System.Nullable<HospitalServer.Dto.ResponseErrorEnum> AddStaff(HospitalServer.Requests.AddStaffRequest request)
        {
            return base.Channel.AddStaff(request);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<HospitalServer.Dto.ResponseErrorEnum>> AddStaffAsync(HospitalServer.Requests.AddStaffRequest request)
        {
            return base.Channel.AddStaffAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IStaffService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IStaffService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:52107/Services/StaffService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return StaffServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IStaffService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return StaffServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IStaffService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IStaffService,
        }
    }
}
