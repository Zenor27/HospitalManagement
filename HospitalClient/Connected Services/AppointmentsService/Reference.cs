//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppointmentsService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppointmentsService.IAppointmentsService")]
    public interface IAppointmentsService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetTodaysAppointments", ReplyAction="http://tempuri.org/IAppointmentsService/GetTodaysAppointmentsResponse")]
        HospitalEntities.Models.Appointment[] GetTodaysAppointments(HospitalEntities.Models.UserTypeEnum userType, int staffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetTodaysAppointments", ReplyAction="http://tempuri.org/IAppointmentsService/GetTodaysAppointmentsResponse")]
        System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetTodaysAppointmentsAsync(HospitalEntities.Models.UserTypeEnum userType, int staffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetAllAppointmentsIncludingPatientAndStaf" +
            "f", ReplyAction="http://tempuri.org/IAppointmentsService/GetAllAppointmentsIncludingPatientAndStaf" +
            "fResponse")]
        HospitalEntities.Models.Appointment[] GetAllAppointmentsIncludingPatientAndStaff(HospitalEntities.Models.UserTypeEnum userType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetAllAppointmentsIncludingPatientAndStaf" +
            "f", ReplyAction="http://tempuri.org/IAppointmentsService/GetAllAppointmentsIncludingPatientAndStaf" +
            "fResponse")]
        System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetAllAppointmentsIncludingPatientAndStaffAsync(HospitalEntities.Models.UserTypeEnum userType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetAppointmentById", ReplyAction="http://tempuri.org/IAppointmentsService/GetAppointmentByIdResponse")]
        HospitalEntities.Models.Appointment GetAppointmentById(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetAppointmentById", ReplyAction="http://tempuri.org/IAppointmentsService/GetAppointmentByIdResponse")]
        System.Threading.Tasks.Task<HospitalEntities.Models.Appointment> GetAppointmentByIdAsync(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/AddAppointment", ReplyAction="http://tempuri.org/IAppointmentsService/AddAppointmentResponse")]
        System.Nullable<HospitalServer.Dto.ResponseErrorEnum> AddAppointment(HospitalServer.Requests.AddAppointmentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/AddAppointment", ReplyAction="http://tempuri.org/IAppointmentsService/AddAppointmentResponse")]
        System.Threading.Tasks.Task<System.Nullable<HospitalServer.Dto.ResponseErrorEnum>> AddAppointmentAsync(HospitalServer.Requests.AddAppointmentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/UpdatePatientBackgroundAndAppointmentDesc" +
            "ription", ReplyAction="http://tempuri.org/IAppointmentsService/UpdatePatientBackgroundAndAppointmentDesc" +
            "riptionResponse")]
        bool UpdatePatientBackgroundAndAppointmentDescription(int appointmentId, string patientBackground, string appointmentDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/UpdatePatientBackgroundAndAppointmentDesc" +
            "ription", ReplyAction="http://tempuri.org/IAppointmentsService/UpdatePatientBackgroundAndAppointmentDesc" +
            "riptionResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientBackgroundAndAppointmentDescriptionAsync(int appointmentId, string patientBackground, string appointmentDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetWaitingAppointments", ReplyAction="http://tempuri.org/IAppointmentsService/GetWaitingAppointmentsResponse")]
        HospitalEntities.Models.Appointment[] GetWaitingAppointments(HospitalEntities.Models.UserTypeEnum userType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetWaitingAppointments", ReplyAction="http://tempuri.org/IAppointmentsService/GetWaitingAppointmentsResponse")]
        System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetWaitingAppointmentsAsync(HospitalEntities.Models.UserTypeEnum userType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetAcceptedAppointments", ReplyAction="http://tempuri.org/IAppointmentsService/GetAcceptedAppointmentsResponse")]
        HospitalEntities.Models.Appointment[] GetAcceptedAppointments(HospitalEntities.Models.UserTypeEnum userType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetAcceptedAppointments", ReplyAction="http://tempuri.org/IAppointmentsService/GetAcceptedAppointmentsResponse")]
        System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetAcceptedAppointmentsAsync(HospitalEntities.Models.UserTypeEnum userType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetRefusedAppointments", ReplyAction="http://tempuri.org/IAppointmentsService/GetRefusedAppointmentsResponse")]
        HospitalEntities.Models.Appointment[] GetRefusedAppointments(HospitalEntities.Models.UserTypeEnum userType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/GetRefusedAppointments", ReplyAction="http://tempuri.org/IAppointmentsService/GetRefusedAppointmentsResponse")]
        System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetRefusedAppointmentsAsync(HospitalEntities.Models.UserTypeEnum userType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/AcceptAppointment", ReplyAction="http://tempuri.org/IAppointmentsService/AcceptAppointmentResponse")]
        void AcceptAppointment(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/AcceptAppointment", ReplyAction="http://tempuri.org/IAppointmentsService/AcceptAppointmentResponse")]
        System.Threading.Tasks.Task AcceptAppointmentAsync(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/RefuseAppointment", ReplyAction="http://tempuri.org/IAppointmentsService/RefuseAppointmentResponse")]
        void RefuseAppointment(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentsService/RefuseAppointment", ReplyAction="http://tempuri.org/IAppointmentsService/RefuseAppointmentResponse")]
        System.Threading.Tasks.Task RefuseAppointmentAsync(int appointmentId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IAppointmentsServiceChannel : AppointmentsService.IAppointmentsService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class AppointmentsServiceClient : System.ServiceModel.ClientBase<AppointmentsService.IAppointmentsService>, AppointmentsService.IAppointmentsService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AppointmentsServiceClient() : 
                base(AppointmentsServiceClient.GetDefaultBinding(), AppointmentsServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAppointmentsService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AppointmentsServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AppointmentsServiceClient.GetBindingForEndpoint(endpointConfiguration), AppointmentsServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AppointmentsServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AppointmentsServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AppointmentsServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AppointmentsServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AppointmentsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public HospitalEntities.Models.Appointment[] GetTodaysAppointments(HospitalEntities.Models.UserTypeEnum userType, int staffId)
        {
            return base.Channel.GetTodaysAppointments(userType, staffId);
        }
        
        public System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetTodaysAppointmentsAsync(HospitalEntities.Models.UserTypeEnum userType, int staffId)
        {
            return base.Channel.GetTodaysAppointmentsAsync(userType, staffId);
        }
        
        public HospitalEntities.Models.Appointment[] GetAllAppointmentsIncludingPatientAndStaff(HospitalEntities.Models.UserTypeEnum userType, int id)
        {
            return base.Channel.GetAllAppointmentsIncludingPatientAndStaff(userType, id);
        }
        
        public System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetAllAppointmentsIncludingPatientAndStaffAsync(HospitalEntities.Models.UserTypeEnum userType, int id)
        {
            return base.Channel.GetAllAppointmentsIncludingPatientAndStaffAsync(userType, id);
        }
        
        public HospitalEntities.Models.Appointment GetAppointmentById(int appointmentId)
        {
            return base.Channel.GetAppointmentById(appointmentId);
        }
        
        public System.Threading.Tasks.Task<HospitalEntities.Models.Appointment> GetAppointmentByIdAsync(int appointmentId)
        {
            return base.Channel.GetAppointmentByIdAsync(appointmentId);
        }
        
        public System.Nullable<HospitalServer.Dto.ResponseErrorEnum> AddAppointment(HospitalServer.Requests.AddAppointmentRequest request)
        {
            return base.Channel.AddAppointment(request);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<HospitalServer.Dto.ResponseErrorEnum>> AddAppointmentAsync(HospitalServer.Requests.AddAppointmentRequest request)
        {
            return base.Channel.AddAppointmentAsync(request);
        }
        
        public bool UpdatePatientBackgroundAndAppointmentDescription(int appointmentId, string patientBackground, string appointmentDescription)
        {
            return base.Channel.UpdatePatientBackgroundAndAppointmentDescription(appointmentId, patientBackground, appointmentDescription);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientBackgroundAndAppointmentDescriptionAsync(int appointmentId, string patientBackground, string appointmentDescription)
        {
            return base.Channel.UpdatePatientBackgroundAndAppointmentDescriptionAsync(appointmentId, patientBackground, appointmentDescription);
        }
        
        public HospitalEntities.Models.Appointment[] GetWaitingAppointments(HospitalEntities.Models.UserTypeEnum userType, int id)
        {
            return base.Channel.GetWaitingAppointments(userType, id);
        }
        
        public System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetWaitingAppointmentsAsync(HospitalEntities.Models.UserTypeEnum userType, int id)
        {
            return base.Channel.GetWaitingAppointmentsAsync(userType, id);
        }
        
        public HospitalEntities.Models.Appointment[] GetAcceptedAppointments(HospitalEntities.Models.UserTypeEnum userType, int id)
        {
            return base.Channel.GetAcceptedAppointments(userType, id);
        }
        
        public System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetAcceptedAppointmentsAsync(HospitalEntities.Models.UserTypeEnum userType, int id)
        {
            return base.Channel.GetAcceptedAppointmentsAsync(userType, id);
        }
        
        public HospitalEntities.Models.Appointment[] GetRefusedAppointments(HospitalEntities.Models.UserTypeEnum userType, int id)
        {
            return base.Channel.GetRefusedAppointments(userType, id);
        }
        
        public System.Threading.Tasks.Task<HospitalEntities.Models.Appointment[]> GetRefusedAppointmentsAsync(HospitalEntities.Models.UserTypeEnum userType, int id)
        {
            return base.Channel.GetRefusedAppointmentsAsync(userType, id);
        }
        
        public void AcceptAppointment(int appointmentId)
        {
            base.Channel.AcceptAppointment(appointmentId);
        }
        
        public System.Threading.Tasks.Task AcceptAppointmentAsync(int appointmentId)
        {
            return base.Channel.AcceptAppointmentAsync(appointmentId);
        }
        
        public void RefuseAppointment(int appointmentId)
        {
            base.Channel.RefuseAppointment(appointmentId);
        }
        
        public System.Threading.Tasks.Task RefuseAppointmentAsync(int appointmentId)
        {
            return base.Channel.RefuseAppointmentAsync(appointmentId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAppointmentsService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAppointmentsService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:52107/Services/AppointmentsService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AppointmentsServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAppointmentsService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AppointmentsServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAppointmentsService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAppointmentsService,
        }
    }
}
